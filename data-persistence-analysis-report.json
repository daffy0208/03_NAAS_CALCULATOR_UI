{
  "summary": {
    "total": 12,
    "critical": 0,
    "high": 6,
    "medium": 6,
    "low": 0,
    "warnings": 11,
    "filesAnalyzed": 6
  },
  "issues": [
    {
      "severity": "high",
      "category": "race-condition",
      "file": "data-store.js",
      "issue": "Async operations in constructor can cause race conditions",
      "fix": "Use factory pattern or explicit initialization method"
    },
    {
      "severity": "high",
      "category": "race-condition",
      "file": "storage-manager.js",
      "issue": "Async operations in constructor can cause race conditions",
      "fix": "Use factory pattern or explicit initialization method"
    },
    {
      "severity": "medium",
      "category": "resource-leak",
      "file": "storage-manager.js",
      "issue": "Potential timeout leaks (4 set, 0 cleared)",
      "fix": "Store timeout IDs and clear them appropriately"
    },
    {
      "severity": "high",
      "category": "race-condition",
      "file": "app.js",
      "issue": "Async operations in constructor can cause race conditions",
      "fix": "Use factory pattern or explicit initialization method"
    },
    {
      "severity": "medium",
      "category": "resource-leak",
      "file": "app.js",
      "issue": "Potential timeout leaks (10 set, 3 cleared)",
      "fix": "Store timeout IDs and clear them appropriately"
    },
    {
      "severity": "high",
      "category": "resource-leak",
      "file": "app.js",
      "issue": "Potential interval leaks (3 set, 2 cleared)",
      "fix": "Store interval IDs and clear them appropriately"
    },
    {
      "severity": "high",
      "category": "race-condition",
      "file": "components.js",
      "issue": "Async operations in constructor can cause race conditions",
      "fix": "Use factory pattern or explicit initialization method"
    },
    {
      "severity": "medium",
      "category": "resource-leak",
      "file": "components.js",
      "issue": "Potential timeout leaks (2 set, 0 cleared)",
      "fix": "Store timeout IDs and clear them appropriately"
    },
    {
      "severity": "medium",
      "category": "resource-leak",
      "file": "wizard.js",
      "issue": "Potential timeout leaks (1 set, 0 cleared)",
      "fix": "Store timeout IDs and clear them appropriately"
    },
    {
      "severity": "high",
      "category": "race-condition",
      "file": "calculation-orchestrator.js",
      "issue": "Async operations in constructor can cause race conditions",
      "fix": "Use factory pattern or explicit initialization method"
    },
    {
      "severity": "medium",
      "category": "resource-leak",
      "file": "calculation-orchestrator.js",
      "issue": "Potential timeout leaks (3 set, 2 cleared)",
      "fix": "Store timeout IDs and clear them appropriately"
    },
    {
      "severity": "medium",
      "category": "multi-tab-sync",
      "file": "app.js",
      "issue": "No storage event handling for multi-tab synchronization",
      "fix": "Add storage event listeners to sync data across tabs"
    }
  ],
  "warnings": [
    {
      "severity": "low",
      "category": "code-duplication",
      "file": "data-store.js",
      "issue": "Duplicate component initialization code",
      "fix": "Extract to a factory function or configuration object"
    },
    {
      "severity": "medium",
      "category": "error-handling",
      "file": "app.js",
      "issue": "Potential unhandled promise rejections",
      "fix": "Add .catch() handlers to all promises"
    },
    {
      "severity": "medium",
      "category": "error-handling",
      "file": "components.js",
      "issue": "Potential unhandled promise rejections",
      "fix": "Add .catch() handlers to all promises"
    },
    {
      "severity": "medium",
      "category": "security",
      "file": "app.js",
      "issue": "Potential XSS vulnerability in DOM manipulation",
      "fix": "Sanitize all user input before DOM insertion"
    },
    {
      "severity": "medium",
      "category": "security",
      "file": "components.js",
      "issue": "Potential XSS vulnerability in DOM manipulation",
      "fix": "Sanitize all user input before DOM insertion"
    },
    {
      "severity": "low",
      "category": "business-logic",
      "file": "components.js",
      "issue": "No business rule validation for component state changes",
      "fix": "Add validation for component interdependencies"
    },
    {
      "severity": "medium",
      "category": "security",
      "file": "wizard.js",
      "issue": "Potential XSS vulnerability in DOM manipulation",
      "fix": "Sanitize all user input before DOM insertion"
    },
    {
      "severity": "medium",
      "category": "concurrency",
      "file": "app.js",
      "issue": "Shared state mutations without synchronization",
      "fix": "Implement proper synchronization for shared state"
    },
    {
      "severity": "medium",
      "category": "concurrency",
      "file": "components.js",
      "issue": "Shared state mutations without synchronization",
      "fix": "Implement proper synchronization for shared state"
    },
    {
      "severity": "medium",
      "category": "concurrency",
      "file": "calculation-orchestrator.js",
      "issue": "Shared state mutations without synchronization",
      "fix": "Implement proper synchronization for shared state"
    },
    {
      "severity": "low",
      "category": "session-management",
      "file": "data-store.js",
      "issue": "No sessionStorage usage for temporary data",
      "fix": "Consider using sessionStorage for temporary session data"
    }
  ],
  "recommendations": [
    "1. üèóÔ∏è  Implement proper async initialization pattern for QuoteDataStore",
    "2. üîí Add data validation and sanitization for all user inputs",
    "3. üö´ Implement proper error handling for all async operations",
    "4. üîÑ Add cross-tab synchronization using storage events",
    "5. üßπ Implement proper cleanup for event listeners and timers",
    "6. üìä Add data schema versioning for future migrations",
    "7. ‚ö° Implement concurrency protection for shared state",
    "8. üõ°Ô∏è  Add comprehensive error boundaries and fallbacks",
    "9. üîç Add monitoring and logging for data operations",
    "10. üß™ Implement comprehensive automated testing"
  ],
  "timestamp": "2025-09-16T11:23:58.439Z",
  "filesAnalyzed": [
    "data-store.js",
    "storage-manager.js",
    "app.js",
    "components.js",
    "wizard.js",
    "calculation-orchestrator.js"
  ]
}